          CHANGES TO CLASS v2.7          
-----------------------------------------
* This file lists all changes on order to incorporate DM-neutrino scattering
  into CLASS
* The code is based on the public CLASS version, downloaded 2/10/10
  ----------
  commit 4be2cb31bb87a5c90d8ae5277ae22252a4732676
  Merge: de7d9d7 55a99c6
  Author: lesgourg <lesgourg@physik.rwth-aachen.de>
  Date:   Mon Sep 10 18:06:10 2018 +0200
  ----------
* For more details see <https://arxiv.org/abs/1903.00540>

1. 'thermodynamics.h'
----------------------------------------
* in struct thermo: add new parameters
  line 154: double u_nuDM_0
	 -> interaction cross section normalizedt to a DM mass of 100 GeV,
	    and the Thomson scattering cross section
  line 155: double n_nuDM;
	 -> temperature dependence of the DM-neutrino scattering cross section
	    sigma_nuDM ~ T^n_nuDM
  line 156: short has_coupling_nuDM
	 -> flag to indicate weather the new coupling should be taken into account
  line 178: int index_th_dmu_nuDM
	 -> index for the DM-neutrino scattering rate

2. 'perturbations.h'
----------------------------------------
* in struct perturb: add new parameters
  line 103: double * alpha_nuDM;
	 -> array containing the higer-multipole coefficients for the
            interaction terms in the 'ur' Boltzmann hierarchy

2. 'input.c'
----------------------------------------
* in function input_init: print information about nu-DM interactions
  line 495: if has_coupling_nuDM is TRUE print the following parameters
	 -> u_nuDM_0
	 -> n_nuDM
	 -> l_max_ur
	 -> >ur_fluid_trigger_tau_over_tau_k
	 -> alpha_nuDM

* in function input_read_parameters
  line 1309: class_read_double("u_nuDM_0", pth->u_nuDM_0)
	  -> read strength of neutrino-DM cooupling
  line 1311: if the coupling strength is greater than 0 set flag 
             has_coupling_nuDM to TRUE
  line 1312: if the coupling strength is greater than 0 read n_nuDM
  line 2682: if has_coupling_nuDM is TRUE create array for multipole coefficients
  line 2684: read in alpha_nuDM from the input file
  line 2691: allocate the array for alpha_nuDM
	  -> array is of length l_max_ur
  line 2696: copy values read to alpha_nuDM
  line 2698: if the # of values read from input is smaller than the l_max_ur copy
             the largest multipole coefficient read from file to all higher ones
  line 2702: if no values are given set all entries of alpha_nuDM to default=1.


* in function input_default_parameters: set default values for all new parameters
                                        but alpha_nuDM
  line 3068: pth->u_nuDM_0=0.;
  line 3069: pth->n_nuDM=0.;
  line 3070: pth->has_coupling_nuDM=_FALSE_;

3. 'thermodynamics.c'
----------------------------------------
* in function 'thermodynamics_at_z'
  line 158: if has_coupling_nuDM is true compute dmu_nuDM
	 -> pvecthermo[pth->index_th_dmu_nuDM] = pow(1.+z, 2.+pth->n_nuDM)
	    *pth->u_nuDM_0*3.*pba->H0*pba->H0/8./_PI_/_G_*pba->Omega0_cdm
            *pow(_c_,4)*_sigma_/1.e11/_eV_/_Mpc_over_m_; 

* in function 'thermodynamics_init'
  line 379: u_nuDM can't be smaller than zero
  line 383: DM-nu coupling is not implemented with non-flat curvature
  line 632: fill thermodynamics table with values for dmu_nDM
	 -> only if has_coupling_nuDM is TRUE
	 -> pth->thermodynamics_table[index_tau*pth->th_size+pth->index_th_dmu_nuDM]
	    = 3./8./_PI_/_G_*pow(pth->z_table[index_tau]+1.,2.+pth->n_nuDM)
            *pba->Omega0_cdm*pba->H0*pba->H0*pth->u_nuDM_0*pow(_c_,4)
            *_sigma_/1.e11/_eV_/_Mpc_over_m_;

* in function 'thermodynamics_indices'
  line 953: asign index to pth->index_th_dmu_nuDM
	 -> only if has_coupling_nuDM is TRUE

* in function 'thermodynamics_output_titles'
  line 3723: add a column for DM-neutrino scattering rate
             class_store_columntitle(titles, "dmu_nuDM [Mpc^-1]", pth->has_coupling_nuDM);

* in function 'thermodynamics_output_data'
  line 3770: write DM-nu scattering rate to file
             class_store_double(dataptr,pvecthermo[pth->index_th_dmu_nuDM],pth->has_coupling_nuDM,storeidx);

4. 'perturbations.c'
----------------------------------------
* in function 'perturb_init'
  line 223: test that nuDM coupling is only implemented with newtonian gauge

* in function 'perturb_derivs'
  line 6918: double S_nuDM
  -> the following commands are executed only if pth->has_coupling_nuDM is TRUE
  line 6983: S_nuDM = 4./3.*pvecback[pba->index_bg_rho_ur]
             /pvecback[pba->index_bg_rho_cdm];
  line 7238: if ppw->approx[ppw->index_ap_rsa] == (int)rsa_off
	     dy[pv->index_pt_theta_cdm] += S_nuDM*pvecthermo[pth->index_th_dmu_nuDM]
	     *(y[pv->index_pt_theta_ur]- y[pv->index_pt_theta_cdm]);
  line 7389: if ppw->approx[ppw->index_ap_rsa] == (int)rsa_off
	     dy[pv->index_pt_theta_ur] += pvecthermo[pth->index_th_dmu_nuDM]
	     *(y[pv->index_pt_theta_cdm]-y[pv->index_pt_theta_ur]);
  line 7401: if ppw->approx[ppw->index_ap_rsa] == (int)rsa_off
	     and if ppw->approx[ppw->index_ap_ufa] == (int)ufa_off
             dy[pv->index_pt_shear_ur] += -0.5*ppt->alpha_nuDM[2]
             *pvecthermo[pth->index_th_dmu_nuDM]*y[pv->index_pt_shear_ur];
  line 7408: if ppw->approx[ppw->index_ap_rsa] == (int)rsa_off
	     and if ppw->approx[ppw->index_ap_ufa] == (int)ufa_off
	     dy[pv->index_pt_l3_ur] -= ppt->alpha_nuDM[l]
             *pvecthermo[pth->index_th_dmu_nuDM]*y[pv->index_pt_l3_ur];
  line 7415: if ppw->approx[ppw->index_ap_rsa] == (int)rsa_off
	     and if ppw->approx[ppw->index_ap_ufa] == (int)ufa_off
             dy[pv->index_pt_delta_ur+l] -= ppt->alpha_nuDM[l]
             *pvecthermo[pth->index_th_dmu_nuDM]*y[pv->index_pt_delta_ur+l];
  line 7423: if ppw->approx[ppw->index_ap_rsa] == (int)rsa_off
	     and if ppw->approx[ppw->index_ap_ufa] == (int)ufa_off
             dy[pv->index_pt_delta_ur+l] -= ppt->alpha_nuDM[l]
             *pvecthermo[pth->index_th_dmu_nuDM]*y[pv->index_pt_delta_ur+l];
	  -> truncation equation for l_max
  line 7450: UFA equation (CLASS scheme): NO MODIFICATIONS!
